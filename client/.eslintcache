[{"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx":"1","E:\\GDesign\\program\\client\\src\\App.tsx":"2","E:\\GDesign\\program\\client\\src\\index.tsx":"3","E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx":"4","E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx":"5","E:\\GDesign\\program\\client\\src\\reportWebVitals.ts":"6","E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx":"7","E:\\GDesign\\program\\client\\src\\components\\Info.tsx":"8","E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx":"9","E:\\GDesign\\program\\client\\src\\components\\Table.tsx":"10","E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx":"11","E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx":"12","E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx":"13","E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx":"14","E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js":"15","E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx":"16","E:\\GDesign\\program\\client\\src\\components\\HistoryRecord.tsx":"17"},{"size":16552,"mtime":1616075737008,"results":"18","hashOfConfig":"19"},{"size":22878,"mtime":1616075446327,"results":"20","hashOfConfig":"19"},{"size":457,"mtime":1611729263800,"results":"21","hashOfConfig":"19"},{"size":2794,"mtime":1615994644759,"results":"22","hashOfConfig":"19"},{"size":6876,"mtime":1615800211777,"results":"23","hashOfConfig":"19"},{"size":425,"mtime":1609982263790,"results":"24","hashOfConfig":"19"},{"size":2794,"mtime":1613826547908,"results":"25","hashOfConfig":"19"},{"size":5501,"mtime":1615996321003,"results":"26","hashOfConfig":"19"},{"size":14450,"mtime":1616074952110,"results":"27","hashOfConfig":"19"},{"size":4058,"mtime":1611406252995,"results":"28","hashOfConfig":"19"},{"size":14548,"mtime":1615800188942,"results":"29","hashOfConfig":"19"},{"size":8768,"mtime":1615721110677,"results":"30","hashOfConfig":"19"},{"size":3184,"mtime":1614588853461,"results":"31","hashOfConfig":"19"},{"size":6058,"mtime":1615720324361,"results":"32","hashOfConfig":"19"},{"size":5702,"mtime":1615529771241,"results":"33","hashOfConfig":"19"},{"size":17316,"mtime":1616069050640,"results":"34","hashOfConfig":"19"},{"size":3804,"mtime":1615995672084,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pde34m",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx",["77"],"E:\\GDesign\\program\\client\\src\\App.tsx",["78"],"E:\\GDesign\\program\\client\\src\\index.tsx",[],["79","80"],"E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx",["81"],"E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx",["82"],"import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n//定义边数组\r\ntype edges=Array<number>;\r\n\r\ninterface Props{\r\n    graph:{\r\n        id:number,\r\n        // nodes:Array<number>,\r\n        // edges:Array<edges>,\r\n        [propName:string]:any,\r\n    },\r\n    [propName: string]: any;\r\n}\r\ninterface Link{\r\n    source:any,\r\n    target:any,\r\n    [propName: string]: any;\r\n}\r\n\r\nclass NodeLink extends React.Component<Props,any>{\r\n    private svgRef:React.RefObject<SVGSVGElement>;\r\n    public svgWidth:number=0;\r\n    public svgHeight:number=0;\r\n    public padding={top:10,bottom:10,left:10,right:10};\r\n    public circleR:string=\"3.5px\";\r\n    constructor(props:Props){\r\n        super(props);\r\n        this.svgRef=React.createRef();\r\n        this.state={layOutNodes:[],layOutLinks:[]};\r\n        this.forceLayout=this.forceLayout.bind(this);\r\n    }\r\n    forceLayout(nodes:Array<number>,edges:Array<edges>,width:number,height:number):void{\r\n        let nodesid=nodes.map((value:number)=>{\r\n            return {id:value,x:0,y:0};\r\n        })\r\n\r\n        let links:Array<Link>=edges.map((value:edges)=>{\r\n            return {source:value[0],target:value[1]};\r\n        });\r\n        // console.log(nodesid,links)\r\n        d3.forceSimulation(nodesid)\r\n        .force(\"link\", d3.forceLink(links).id(d=>d.id))\r\n        .force(\"charge\", d3.forceManyBody())\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n        .on('tick', function () {\r\n            // console.log(\"waiting...\");\r\n        })\r\n        .on(\"end\",()=>{\r\n            // console.log(\"布局完成！\");\r\n            // console.log(links)\r\n            let x_max:number=d3.max(nodesid,(d:d3.SimulationNodeDatum):number=>d.x || 0) || 0;\r\n            let x_min:number=d3.min(nodesid,(d:d3.SimulationNodeDatum):number=>d.x || 0) || 0;\r\n            let y_max:number=d3.max(nodesid,(d:d3.SimulationNodeDatum):number=>d.y || 0) || 0;\r\n            let y_min:number=d3.min(nodesid,(d:d3.SimulationNodeDatum):number=>d.y || 0) || 0;\r\n            \r\n            \r\n                \r\n                new Promise((resolve:any,reject:any)=>{\r\n                    //获取纵横比\r\n                    let height_force=y_max-y_min;\r\n                    let width_force=x_max-x_min;\r\n                    let scaleWidth=this.svgWidth/4*3;\r\n                    let scaleHeight=this.svgHeight/4*3;\r\n                    if(x_max>=this.svgWidth || x_min<=0 || y_min<=0 || y_max>=this.svgHeight){\r\n                        scaleWidth=this.svgWidth;\r\n                        scaleHeight=this.svgHeight;\r\n                    }\r\n                    \r\n                    if(height_force>width_force){\r\n                        scaleWidth=(scaleHeight*width_force)/height_force;\r\n                        if(scaleWidth>this.svgWidth){\r\n                            scaleWidth=this.svgWidth;\r\n                            scaleHeight=(scaleWidth*height_force)/width_force;\r\n                        }\r\n                    }\r\n                    else{\r\n                        scaleHeight=(scaleWidth*height_force)/width_force;\r\n                        if(scaleHeight>this.svgHeight){\r\n                            scaleHeight=this.svgHeight;\r\n                            scaleWidth=(scaleHeight*width_force)/height_force;\r\n                        }\r\n                    }\r\n                    let xScale: d3.ScaleLinear<number, number>=d3.scaleLinear().domain([x_min,x_max]).range([(this.svgWidth-scaleWidth)/2+this.padding.left,(this.svgWidth-scaleWidth)/2+scaleWidth-this.padding.right]);\r\n                    let yScale: d3.ScaleLinear<number, number>=d3.scaleLinear().domain([y_min,y_max]).range([(this.svgHeight-scaleHeight)/2+this.padding.top,(this.svgHeight-scaleHeight)/2+scaleHeight-this.padding.bottom]);\r\n                    \r\n                    \r\n                    let newNodes=[];\r\n                    for(let i=0;i<nodesid.length;i++){\r\n                        newNodes.push({\r\n                            id:nodesid[i].id,\r\n                            x:xScale(nodesid[i].x),\r\n                            y:yScale(nodesid[i].y)\r\n                        })\r\n                    }\r\n                   \r\n                    let newLinks=[];\r\n                    for(let i=0;i<links.length;i++){\r\n                        newLinks.push({\r\n                            index:links[i].index,\r\n                            source:{id:links[i].source.id,x:xScale(links[i].source.x),y:yScale(links[i].source.y)},\r\n                            target:{id:links[i].target.id,x:xScale(links[i].target.x),y:yScale(links[i].target.y)}\r\n                        })\r\n                    }\r\n                    \r\n                    resolve([newNodes,newLinks]);\r\n                }).then((res:any)=>{\r\n                    // console.log(res[0])\r\n                    this.setState({layOutNodes:res[0],layOutLinks:res[1]});\r\n                })\r\n            \r\n            // else{\r\n                \r\n            //     this.setState({layOutNodes:nodesid,layOutLinks:links});\r\n            // }\r\n            \r\n            // this.setState({layOutNodes:nodesid,layOutLinks:links});\r\n        })\r\n    }\r\n    componentDidMount():void{\r\n        this.svgWidth=this.svgRef.current?.clientWidth || 0;\r\n        this.svgHeight=this.svgRef.current?.clientHeight || 0;\r\n        this.forceLayout(this.props.graph.nodes,this.props.graph.edges,this.svgWidth,this.svgHeight);\r\n    }\r\n    componentWillReceiveProps(nextProps:Props):void{\r\n        this.forceLayout(nextProps.graph.nodes,nextProps.graph.edges,this.svgWidth,this.svgHeight);\r\n    }\r\n    render():React.ReactElement{\r\n        // console.log(this.state.layOutNodes)\r\n        const {layOutNodes,layOutLinks,focusNode}=this.state;\r\n        let nodes=layOutNodes.map((value:any,index:number)=>{\r\n            return <circle r={this.circleR} cx={value.x} cy={value.y} key={index} fill=\"#ccc\" strokeWidth=\"1px\" stroke=\"white\" cursor='pointer'></circle>\r\n        })\r\n        let links=layOutLinks.map((value:any)=>{\r\n            return <line x1={value.source.x} y1={value.source.y} x2={value.target.x} \r\n            y2={value.target.y} fill=\"none\" strokeWidth=\"1px\" stroke=\"#ccc\" key={value.index}></line>\r\n        })\r\n        return (\r\n            <svg ref={this.svgRef} style={{width:'100%',height:'100%'}} onClick={this.props.onClick?this.props.onClick.bind(this.props.parent,this.props.graph,this.state.layOutNodes,this.state.layOutLinks,this.props.graph.id):null}>\r\n                {/* <text x=\"0\"y='20'>{this.props.graph.year}</text> */}\r\n                <g>{links}</g>\r\n                <g>{nodes}</g>\r\n                {/* <text x={focusNode.x?focusNode.x:null} y={focusNode.y?focusNode.y:null} fontSize='0.6rem'>\r\n                    {focusNode.id?this.props.graph['authorInfo'][focusNode.id]['name']:''}\r\n                </text> */}\r\n            </svg>\r\n        )\r\n    }\r\n}\r\nexport default NodeLink;","E:\\GDesign\\program\\client\\src\\reportWebVitals.ts",[],["83","84"],"E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx",["85"],"E:\\GDesign\\program\\client\\src\\components\\Info.tsx",["86","87"],"E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx",["88"],"E:\\GDesign\\program\\client\\src\\components\\Table.tsx",["89"],"E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx",["90"],"import * as React from 'react';\r\nimport axios from 'axios';\r\nimport * as d3 from 'd3';\r\n\r\ntype attr = {\r\n    [propName: string]: any,\r\n}\r\n\r\ninterface Props {\r\n    url: string,\r\n    parent: any,\r\n    dimensions: number,\r\n    attrWeight: number,\r\n    strWeight: number,\r\n    attrChecked: attr,\r\n    choosePoints: Array<ChoosePointData>,//匹配的数据\r\n    centerPoint: ChoosePointData,\r\n    display: string,\r\n    dataType: string,\r\n    graphType: string,//结构还是属性\r\n    x: string,//x轴字段\r\n    y: string,//y轴字段\r\n    personGraphs:Array<attr>,\r\n}\r\n//定义边数组\r\ntype edges = Array<number>;\r\n//定义散点数据接口\r\ntype ChoosePointData = {\r\n    id: number,\r\n    // nodes: Array<number>,\r\n    // edges:Array<edges>,\r\n    [propName: string]: any,\r\n}\r\nclass DistributeAttr extends React.Component<Props, any>{\r\n\r\n    private svgRef: React.RefObject<SVGSVGElement>;\r\n    public padding = { top: 20, bottom: 30, left: 30, right: 20 };\r\n    public svgWidth: number = 0;\r\n    public svgHeight: number = 0;\r\n    public lightColor: string = 'orange';\r\n    public centerColor: string = 'red';\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = { data: [], choosePoints: [], centerPoint: null };\r\n        this.svgRef = React.createRef();\r\n        this.compute = this.compute.bind(this);\r\n        this.searchGraph = this.searchGraph.bind(this);\r\n    }\r\n\r\n    compute(data: any, xAttr: string, yAttr: string): void {\r\n        const { graphType } = this.props;\r\n        let x_min_max = d3.extent(data, (d: any) => d[graphType][xAttr]);\r\n        // x_min_max[0]=0;\r\n        let y_min_max = d3.extent(data, (d: any) => d[graphType][yAttr]);\r\n        // y_min_max[0]=0;\r\n        let xscale = d3.scaleLinear(x_min_max, [this.padding.left, this.svgWidth - this.padding.right]);\r\n        let yscale = d3.scaleLinear(y_min_max, [this.svgHeight - this.padding.bottom, this.padding.top]);\r\n\r\n        data.forEach((value: any) => {\r\n            value.x = xscale(value[graphType][xAttr]);\r\n            value.y = yscale(value[graphType][yAttr]);\r\n        });\r\n\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .selectAll(\"g\")\r\n            .remove();\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".text\")\r\n            .selectAll(\"g\")\r\n            .remove();\r\n\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(-2,${this.svgHeight - this.padding.bottom + 2})`)\r\n            .call(d3.axisBottom(xscale).ticks(8))\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(${this.padding.left - 2},2)`)\r\n            .call(d3.axisLeft(yscale).ticks(5))\r\n\r\n        this.setState({ data: data });\r\n\r\n    }\r\n    \r\n    searchGraph(pointData: ChoosePointData): void {//根据名字搜索包含该节点的网络\r\n        const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = this.props;\r\n        let checkedArr: any = [];\r\n        for (let key in attrChecked) {\r\n            checkedArr.push({ name: key, value: attrChecked[key] })\r\n        }\r\n        axios.post(url + '/searchGraphByGraphId', { wd: pointData.id, dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n            .then(res => {\r\n                // console.log(res.data.data);\r\n                this.props.parent.setPersonGraphs(res.data.data);\r\n            })\r\n        this.setState({ centerPoint: pointData });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.svgWidth = this.svgRef.current?.clientWidth || 0;\r\n        this.svgHeight = this.svgRef.current?.clientHeight || 0;\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps: Props): void {\r\n        if (nextProps.choosePoints !== this.props.choosePoints) {\r\n            let choosePoints = [];\r\n            for (let j in nextProps.choosePoints) {\r\n                for (let i in this.state.data) {\r\n                    if (this.state.data[i].id === nextProps.choosePoints[j].id) {\r\n                        choosePoints.push(this.state.data[i]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.setState({ choosePoints: choosePoints });\r\n        }\r\n        if (nextProps.centerPoint !== this.props.centerPoint) {\r\n            for (let i in this.state.data) {\r\n                if (this.state.data[i].id === nextProps.centerPoint.id) {\r\n                    this.setState({ centerPoint: this.state.data[i] });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (nextProps.attrChecked !== this.props.attrChecked && nextProps.x!=='') {\r\n            const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = nextProps;\r\n            let checkedArr: any = [];\r\n            for (let key in attrChecked) {\r\n                checkedArr.push({ name: key, value: attrChecked[key] })\r\n            }\r\n            axios.post(url, { dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n                .then(res => {\r\n                    const data = res.data.data;\r\n                    let { x, y } = nextProps;\r\n                    this.compute(data, x, y);\r\n                })\r\n        }\r\n        if (nextProps.x !== this.props.x || nextProps.y !== this.props.y) {\r\n            const { data } = this.state;\r\n            const { x, y } = nextProps;\r\n            if (data.length > 0) {\r\n                this.compute(data, x, y);\r\n            }\r\n            else{\r\n                const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = nextProps;\r\n                let checkedArr: any = [];\r\n                for (let key in attrChecked) {\r\n                    checkedArr.push({ name: key, value: attrChecked[key] })\r\n                }\r\n                axios.post(url, { dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n                    .then(res => {\r\n                        const data = res.data.data;\r\n                        let { x, y } = nextProps;\r\n                        this.compute(data, x, y);\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render(): React.ReactElement {\r\n        const { data, centerPoint, choosePoints} = this.state;\r\n        const {x,y,display,graphType,personGraphs} = this.props;\r\n        let allPointEl = data.map((value: any, index: number) =>\r\n            <circle key={index} cx={value.x} cy={value.y} r='2px' fill='#1890ff' fillOpacity={0.4} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, value)}></circle>\r\n        )\r\n        \r\n        //centerPoint\r\n        //点击的点，需要匹配的点\r\n        let centerPointEl = null;\r\n        if (centerPoint != null) {\r\n            centerPointEl = <circle r=\"2px\" cx={centerPoint.x} cy={centerPoint.y} fill={this.centerColor} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, centerPoint)}></circle>\r\n        }\r\n        //圈选的点，匹配到的点\r\n        let pointsChooseEl = choosePoints.map((value: ChoosePointData, index: number) =>\r\n            <circle r=\"2px\" cx={value.x} cy={value.y} key={index} fill={this.lightColor} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, value)}></circle>\r\n        )\r\n\r\n        //点击的点，试选阶段\r\n        let persongraphs = personGraphs.map((value: any, index: number) =>{\r\n            for(let i=0;i<data.length;i++){\r\n                if(data[i].id===value.id){\r\n                    return <circle r=\"2px\" cx={data[i].x} cy={data[i].y} key={index} fill={this.centerColor} stroke='white' strokeWidth='0.5px'\r\n                    onClick={this.searchGraph.bind(this, value)}></circle>\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        )\r\n\r\n        return (\r\n            <div className=\"distributeAttr\" style={{ position: 'absolute', left: display === '0' ? '-100%' : '0' }}>\r\n                \r\n                <svg style={{ width: '100%', height: '100%' }} ref={this.svgRef} id={'svg_' + graphType}>\r\n                    <g className=\"axis\"></g>\r\n                    <g className=\"text\"></g>\r\n                    <text x={this.svgWidth-50} y={this.svgHeight-40}>{x}</text>\r\n                    <text x='5px' y='15px'>{y}</text>\r\n                    {allPointEl}\r\n                    {pointsChooseEl}\r\n                    {centerPointEl}\r\n                    {persongraphs}\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DistributeAttr;",["91","92"],"E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx",[],["93","94"],"E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx",["95","96"],"import ellipseForce from './ellipseForce';\r\n\r\nimport * as React from 'react';\r\nimport * as d3 from 'd3';\r\nimport { rgb, RGBColor } from 'd3';\r\nimport menURL from '../assets/men.png';\r\n\r\n\r\n//定义边数组\r\ntype edges=Array<number>;\r\ntype graph={\r\n    id:number,\r\n        // nodes:Array<number>,\r\n        // edges:Array<edges>,\r\n    [propName:string]:any,\r\n}\r\n\r\ninterface Props{\r\n    graph:graph,\r\n    [propName: string]: any;\r\n}\r\ninterface Link{\r\n    source:any,\r\n    target:any,\r\n    [propName: string]: any;\r\n}\r\n\r\nclass PNodeLink extends React.Component<Props,any>{\r\n    private svgRef:React.RefObject<SVGSVGElement>;\r\n    public svgWidth:number=0;\r\n    public svgHeight:number=0;\r\n    public circleR:number=30;\r\n    public circleFill:RGBColor=rgb(246,196,103);\r\n    public circleStroke:RGBColor=rgb(216,160,25);\r\n    public linkWidthMax:number=5;\r\n    public linkWidthMin:number=1;\r\n    public nameFontSize:number=6;\r\n    public padding={top:10,bottom:10,left:10,right:10};\r\n    constructor(props:Props){\r\n        super(props);\r\n        this.svgRef=React.createRef();\r\n        this.state={layOutNodes:[],layOutLinks:[],focusNode:{}};\r\n        this.showInfo=this.showInfo.bind(this);\r\n        this.hideInfo=this.hideInfo.bind(this);\r\n        this.forceLayout=this.forceLayout.bind(this);\r\n    }\r\n    forceLayout(graph:graph,width:number,height:number):void{\r\n        let {nodes,edges,weight}=graph;\r\n        //连线粗细比例尺\r\n        let weight_min_max=d3.extent(weight,(d:any)=>d);\r\n        let weightScale=d3.scaleLinear(weight_min_max,[this.linkWidthMin,this.linkWidthMax])\r\n        let nodesid=nodes.map((value:number)=>{\r\n            return {id:value,x:0,y:0,rx:this.circleR,ry:this.circleR};\r\n        })\r\n\r\n        let links:Array<Link>=edges.map((value:edges,index:number)=>{\r\n            return {source:value[0],target:value[1],width:weightScale(weight[index])};\r\n        });\r\n        // console.log(nodesid,links)\r\n        d3.forceSimulation(nodesid)\r\n        .force(\"link\", d3.forceLink(links).distance(100).id(d=>d.id))\r\n        .force(\"collide\", ellipseForce())\r\n        .force(\"charge\", d3.forceManyBody())\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n        .on('tick', function () {\r\n            // console.log(\"waiting...\");\r\n        })\r\n        .on(\"end\",()=>{\r\n            this.setState({layOutNodes:nodesid,layOutLinks:links});\r\n        })\r\n    }\r\n    showInfo(data:any):void{\r\n        this.setState({focusNode:data});\r\n    }\r\n    hideInfo():void{\r\n        this.setState({focusNode:{}});\r\n    }\r\n    componentDidMount():void{\r\n        this.svgWidth=this.svgRef.current?.clientWidth || 0;\r\n        this.svgHeight=this.svgRef.current?.clientHeight || 0;\r\n        this.forceLayout(this.props.graph,this.svgWidth,this.svgHeight);\r\n        let svg=d3.select('#svg'+this.props.graph.id)\r\n        svg.call(d3.zoom()\r\n        .scaleExtent([0.1,7])\r\n        .on(\"zoom\",zoomed));\r\n        \r\n        function zoomed(){\r\n            let transform = d3.zoomTransform(svg.node());\r\n            //svg_point.selectAll(\"circle\").attr(\"r\",1);\r\n            svg.selectAll(\"g\").attr(\"transform\", \"translate(\" + transform.x + \",\" + transform.y + \") scale(\" + transform.k + \")\");\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps:Props):void{\r\n        this.forceLayout(nextProps.graph,this.svgWidth,this.svgHeight);\r\n    }\r\n    render():React.ReactElement{\r\n        const {layOutNodes,layOutLinks,focusNode}=this.state;\r\n        const {graph}=this.props;\r\n        let icons:Array<React.ReactElement>=[];\r\n        let nodes=layOutNodes.map((value:any,index:number)=>{\r\n            icons.push(<image key={index} x={value.x-this.circleR/1.5/2} y={value.y-this.circleR/1.5-5} width={this.circleR/1.5} height={this.circleR/1.5} xlinkHref={menURL}></image>)\r\n            return <circle r={this.circleR} cx={value.x} cy={value.y} key={index} fill={this.circleFill.toString()} strokeWidth=\"1px\" stroke={this.circleStroke.toString()}\r\n            onMouseOver={this.showInfo.bind(this,value)} onMouseOut={this.hideInfo} cursor='pointer'></circle>\r\n        })\r\n        \r\n        let names=layOutNodes.map((value:any,index:number)=>{\r\n            if(graph['authorInfo'][value.id]){\r\n                let name=graph['authorInfo'][value.id]['name'];\r\n                let count=(this.circleR-1)*2/(this.nameFontSize/2);\r\n                if(name.length/2*this.nameFontSize>(this.circleR-1)*2){\r\n                    name=name.substr(0,count);\r\n                }\r\n                return <text x={value.x-name.length*this.nameFontSize/4} y={value.y+this.nameFontSize/4} key={index} fontSize={this.nameFontSize+'px'}>{name}</text>\r\n            }\r\n            \r\n        })\r\n        // let cites=layOutNodes.map((value:any,index:number)=>{\r\n        //     let a=[];\r\n        //     if(graph['authorInfo'][value.id]){\r\n        //         let cite=graph['authorInfo'][value.id]['cite'];\r\n        //         let middle=cite/2;\r\n        //         for(let i=0;i<cite;i++){\r\n\r\n        //             a.push(<image x={value.x+2*(i-middle)} y={value.y-this.circleR/2-5} width={this.circleR/2} height={this.circleR/2} xlinkHref={menURL}></image>)\r\n        //         }\r\n        //         return a;\r\n        //     }\r\n        // })\r\n        let links=layOutLinks.map((value:any)=>{\r\n            return <line x1={value.source.x} y1={value.source.y} x2={value.target.x} \r\n            y2={value.target.y} fill=\"none\" strokeWidth={value.width} stroke=\"#ccc\" key={value.index}></line>\r\n        })\r\n        return (\r\n            <svg ref={this.svgRef} style={{width:'100%',height:'100%'}} onClick={this.props.onClick?this.props.onClick.bind(this.props.parent,this.state.layOutNodes,this.state.layOutLinks,this.props.graph.id):null}\r\n            id={'svg'+this.props.graph.id}>\r\n                {/* <image width=\"100\" height=\"100\" xlinkHref={lineURL}></image> */}\r\n                <g>{links}</g>\r\n                <g>{nodes}</g>\r\n                <g>{names}</g>\r\n                <g>{icons}</g>\r\n            </svg>\r\n        )\r\n    }\r\n}\r\nexport default PNodeLink;","E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js",["97","98","99","100","101","102"],"E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx",["103"],"E:\\GDesign\\program\\client\\src\\components\\HistoryRecord.tsx",["104"],{"ruleId":"105","severity":1,"message":"106","line":4,"column":10,"nodeType":"107","messageId":"108","endLine":4,"endColumn":23},{"ruleId":"105","severity":1,"message":"109","line":20,"column":6,"nodeType":"107","messageId":"108","endLine":20,"endColumn":11},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"105","severity":1,"message":"109","line":6,"column":6,"nodeType":"107","messageId":"108","endLine":6,"endColumn":11},{"ruleId":"105","severity":1,"message":"114","line":131,"column":40,"nodeType":"107","messageId":"108","endLine":131,"endColumn":49},{"ruleId":"110","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"105","severity":1,"message":"117","line":48,"column":15,"nodeType":"107","messageId":"108","endLine":48,"endColumn":21},{"ruleId":"105","severity":1,"message":"109","line":15,"column":6,"nodeType":"107","messageId":"108","endLine":15,"endColumn":11},{"ruleId":"118","severity":1,"message":"119","line":95,"column":21,"nodeType":"120","endLine":95,"endColumn":168},{"ruleId":"105","severity":1,"message":"121","line":233,"column":20,"nodeType":"107","messageId":"108","endLine":233,"endColumn":24},{"ruleId":"122","severity":1,"message":"123","line":40,"column":63,"nodeType":"124","messageId":"125","endLine":40,"endColumn":65},{"ruleId":"105","severity":1,"message":"109","line":26,"column":6,"nodeType":"107","messageId":"108","endLine":26,"endColumn":11},{"ruleId":"110","replacedBy":"126"},{"ruleId":"112","replacedBy":"127"},{"ruleId":"110","replacedBy":"128"},{"ruleId":"112","replacedBy":"129"},{"ruleId":"105","severity":1,"message":"114","line":97,"column":40,"nodeType":"107","messageId":"108","endLine":97,"endColumn":49},{"ruleId":"130","severity":1,"message":"131","line":106,"column":59,"nodeType":"132","messageId":"133","endLine":106,"endColumn":61},{"ruleId":"134","severity":1,"message":"135","line":7,"column":1,"nodeType":"136","endLine":155,"endColumn":2},{"ruleId":"122","severity":1,"message":"137","line":44,"column":17,"nodeType":"124","messageId":"125","endLine":44,"endColumn":19},{"ruleId":"122","severity":1,"message":"137","line":55,"column":22,"nodeType":"124","messageId":"125","endLine":55,"endColumn":24},{"ruleId":"122","severity":1,"message":"137","line":55,"column":37,"nodeType":"124","messageId":"125","endLine":55,"endColumn":39},{"ruleId":"122","severity":1,"message":"137","line":59,"column":29,"nodeType":"124","messageId":"125","endLine":59,"endColumn":31},{"ruleId":"122","severity":1,"message":"137","line":63,"column":29,"nodeType":"124","messageId":"125","endLine":63,"endColumn":31},{"ruleId":"105","severity":1,"message":"138","line":300,"column":17,"nodeType":"107","messageId":"108","endLine":300,"endColumn":18},{"ruleId":"130","severity":1,"message":"131","line":60,"column":51,"nodeType":"132","messageId":"133","endLine":60,"endColumn":53},"@typescript-eslint/no-unused-vars","'RecordWithTtl' is defined but never used.","Identifier","unusedVar","'edges' is defined but never used.","no-native-reassign",["139"],"no-negated-in-lhs",["140"],"'focusNode' is assigned a value but never used.",["139"],["140"],"'suffix' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["139"],["140"],["139"],["140"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Expected '===' and instead saw '=='.","'y' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]