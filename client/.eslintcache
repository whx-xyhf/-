[{"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx":"1","E:\\GDesign\\program\\client\\src\\App.tsx":"2","E:\\GDesign\\program\\client\\src\\index.tsx":"3","E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx":"4","E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx":"5","E:\\GDesign\\program\\client\\src\\reportWebVitals.ts":"6","E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx":"7","E:\\GDesign\\program\\client\\src\\components\\Info.tsx":"8","E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx":"9","E:\\GDesign\\program\\client\\src\\components\\Table.tsx":"10","E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx":"11","E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx":"12","E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx":"13","E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx":"14","E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js":"15","E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx":"16","E:\\GDesign\\program\\client\\src\\components\\HistoryRecord.tsx":"17"},{"size":16838,"mtime":1616245722710,"results":"18","hashOfConfig":"19"},{"size":22986,"mtime":1616247915534,"results":"20","hashOfConfig":"19"},{"size":457,"mtime":1611729263800,"results":"21","hashOfConfig":"19"},{"size":3936,"mtime":1616139152494,"results":"22","hashOfConfig":"19"},{"size":6876,"mtime":1615800211777,"results":"23","hashOfConfig":"19"},{"size":425,"mtime":1609982263790,"results":"24","hashOfConfig":"19"},{"size":2794,"mtime":1613826547908,"results":"25","hashOfConfig":"19"},{"size":5567,"mtime":1616241671727,"results":"26","hashOfConfig":"19"},{"size":15559,"mtime":1616245112322,"results":"27","hashOfConfig":"19"},{"size":4058,"mtime":1611406252995,"results":"28","hashOfConfig":"19"},{"size":14546,"mtime":1616245291146,"results":"29","hashOfConfig":"19"},{"size":8938,"mtime":1616247858859,"results":"30","hashOfConfig":"19"},{"size":3184,"mtime":1614588853461,"results":"31","hashOfConfig":"19"},{"size":7424,"mtime":1616244330547,"results":"32","hashOfConfig":"19"},{"size":5702,"mtime":1615529771241,"results":"33","hashOfConfig":"19"},{"size":17322,"mtime":1616137940516,"results":"34","hashOfConfig":"19"},{"size":4008,"mtime":1616241645788,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pde34m",{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx",[],"E:\\GDesign\\program\\client\\src\\App.tsx",["74","75"],"E:\\GDesign\\program\\client\\src\\index.tsx",[],["76","77"],"E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx",["78","79","80"],"E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx",["81"],"import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n//定义边数组\r\ntype edges=Array<number>;\r\n\r\ninterface Props{\r\n    graph:{\r\n        id:number,\r\n        // nodes:Array<number>,\r\n        // edges:Array<edges>,\r\n        [propName:string]:any,\r\n    },\r\n    [propName: string]: any;\r\n}\r\ninterface Link{\r\n    source:any,\r\n    target:any,\r\n    [propName: string]: any;\r\n}\r\n\r\nclass NodeLink extends React.Component<Props,any>{\r\n    private svgRef:React.RefObject<SVGSVGElement>;\r\n    public svgWidth:number=0;\r\n    public svgHeight:number=0;\r\n    public padding={top:10,bottom:10,left:10,right:10};\r\n    public circleR:string=\"3.5px\";\r\n    constructor(props:Props){\r\n        super(props);\r\n        this.svgRef=React.createRef();\r\n        this.state={layOutNodes:[],layOutLinks:[]};\r\n        this.forceLayout=this.forceLayout.bind(this);\r\n    }\r\n    forceLayout(nodes:Array<number>,edges:Array<edges>,width:number,height:number):void{\r\n        let nodesid=nodes.map((value:number)=>{\r\n            return {id:value,x:0,y:0};\r\n        })\r\n\r\n        let links:Array<Link>=edges.map((value:edges)=>{\r\n            return {source:value[0],target:value[1]};\r\n        });\r\n        // console.log(nodesid,links)\r\n        d3.forceSimulation(nodesid)\r\n        .force(\"link\", d3.forceLink(links).id(d=>d.id))\r\n        .force(\"charge\", d3.forceManyBody())\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n        .on('tick', function () {\r\n            // console.log(\"waiting...\");\r\n        })\r\n        .on(\"end\",()=>{\r\n            // console.log(\"布局完成！\");\r\n            // console.log(links)\r\n            let x_max:number=d3.max(nodesid,(d:d3.SimulationNodeDatum):number=>d.x || 0) || 0;\r\n            let x_min:number=d3.min(nodesid,(d:d3.SimulationNodeDatum):number=>d.x || 0) || 0;\r\n            let y_max:number=d3.max(nodesid,(d:d3.SimulationNodeDatum):number=>d.y || 0) || 0;\r\n            let y_min:number=d3.min(nodesid,(d:d3.SimulationNodeDatum):number=>d.y || 0) || 0;\r\n            \r\n            \r\n                \r\n                new Promise((resolve:any,reject:any)=>{\r\n                    //获取纵横比\r\n                    let height_force=y_max-y_min;\r\n                    let width_force=x_max-x_min;\r\n                    let scaleWidth=this.svgWidth/4*3;\r\n                    let scaleHeight=this.svgHeight/4*3;\r\n                    if(x_max>=this.svgWidth || x_min<=0 || y_min<=0 || y_max>=this.svgHeight){\r\n                        scaleWidth=this.svgWidth;\r\n                        scaleHeight=this.svgHeight;\r\n                    }\r\n                    \r\n                    if(height_force>width_force){\r\n                        scaleWidth=(scaleHeight*width_force)/height_force;\r\n                        if(scaleWidth>this.svgWidth){\r\n                            scaleWidth=this.svgWidth;\r\n                            scaleHeight=(scaleWidth*height_force)/width_force;\r\n                        }\r\n                    }\r\n                    else{\r\n                        scaleHeight=(scaleWidth*height_force)/width_force;\r\n                        if(scaleHeight>this.svgHeight){\r\n                            scaleHeight=this.svgHeight;\r\n                            scaleWidth=(scaleHeight*width_force)/height_force;\r\n                        }\r\n                    }\r\n                    let xScale: d3.ScaleLinear<number, number>=d3.scaleLinear().domain([x_min,x_max]).range([(this.svgWidth-scaleWidth)/2+this.padding.left,(this.svgWidth-scaleWidth)/2+scaleWidth-this.padding.right]);\r\n                    let yScale: d3.ScaleLinear<number, number>=d3.scaleLinear().domain([y_min,y_max]).range([(this.svgHeight-scaleHeight)/2+this.padding.top,(this.svgHeight-scaleHeight)/2+scaleHeight-this.padding.bottom]);\r\n                    \r\n                    \r\n                    let newNodes=[];\r\n                    for(let i=0;i<nodesid.length;i++){\r\n                        newNodes.push({\r\n                            id:nodesid[i].id,\r\n                            x:xScale(nodesid[i].x),\r\n                            y:yScale(nodesid[i].y)\r\n                        })\r\n                    }\r\n                   \r\n                    let newLinks=[];\r\n                    for(let i=0;i<links.length;i++){\r\n                        newLinks.push({\r\n                            index:links[i].index,\r\n                            source:{id:links[i].source.id,x:xScale(links[i].source.x),y:yScale(links[i].source.y)},\r\n                            target:{id:links[i].target.id,x:xScale(links[i].target.x),y:yScale(links[i].target.y)}\r\n                        })\r\n                    }\r\n                    \r\n                    resolve([newNodes,newLinks]);\r\n                }).then((res:any)=>{\r\n                    // console.log(res[0])\r\n                    this.setState({layOutNodes:res[0],layOutLinks:res[1]});\r\n                })\r\n            \r\n            // else{\r\n                \r\n            //     this.setState({layOutNodes:nodesid,layOutLinks:links});\r\n            // }\r\n            \r\n            // this.setState({layOutNodes:nodesid,layOutLinks:links});\r\n        })\r\n    }\r\n    componentDidMount():void{\r\n        this.svgWidth=this.svgRef.current?.clientWidth || 0;\r\n        this.svgHeight=this.svgRef.current?.clientHeight || 0;\r\n        this.forceLayout(this.props.graph.nodes,this.props.graph.edges,this.svgWidth,this.svgHeight);\r\n    }\r\n    componentWillReceiveProps(nextProps:Props):void{\r\n        this.forceLayout(nextProps.graph.nodes,nextProps.graph.edges,this.svgWidth,this.svgHeight);\r\n    }\r\n    render():React.ReactElement{\r\n        // console.log(this.state.layOutNodes)\r\n        const {layOutNodes,layOutLinks,focusNode}=this.state;\r\n        let nodes=layOutNodes.map((value:any,index:number)=>{\r\n            return <circle r={this.circleR} cx={value.x} cy={value.y} key={index} fill=\"#ccc\" strokeWidth=\"1px\" stroke=\"white\" cursor='pointer'></circle>\r\n        })\r\n        let links=layOutLinks.map((value:any)=>{\r\n            return <line x1={value.source.x} y1={value.source.y} x2={value.target.x} \r\n            y2={value.target.y} fill=\"none\" strokeWidth=\"1px\" stroke=\"#ccc\" key={value.index}></line>\r\n        })\r\n        return (\r\n            <svg ref={this.svgRef} style={{width:'100%',height:'100%'}} onClick={this.props.onClick?this.props.onClick.bind(this.props.parent,this.props.graph,this.state.layOutNodes,this.state.layOutLinks,this.props.graph.id):null}>\r\n                {/* <text x=\"0\"y='20'>{this.props.graph.year}</text> */}\r\n                <g>{links}</g>\r\n                <g>{nodes}</g>\r\n                {/* <text x={focusNode.x?focusNode.x:null} y={focusNode.y?focusNode.y:null} fontSize='0.6rem'>\r\n                    {focusNode.id?this.props.graph['authorInfo'][focusNode.id]['name']:''}\r\n                </text> */}\r\n            </svg>\r\n        )\r\n    }\r\n}\r\nexport default NodeLink;","E:\\GDesign\\program\\client\\src\\reportWebVitals.ts",[],["82","83"],"E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx",["84"],"E:\\GDesign\\program\\client\\src\\components\\Info.tsx",["85","86"],"E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx",["87"],"E:\\GDesign\\program\\client\\src\\components\\Table.tsx",["88"],"E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx",["89"],"E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx",["90","91","92","93"],"E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js",["94","95","96","97","98","99"],"function constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nexport default function (padding, innerRepulsion, outerRepulsion) {\n  var nodes;\n  \n  if (typeof padding !== \"function\") padding = constant(padding == null ? 4 : +padding);\n  innerRepulsion = innerRepulsion == null ? 0.5 : +innerRepulsion;\n  outerRepulsion = outerRepulsion == null ? 0.5 : +outerRepulsion;\n\n  function force(alpha) {\n    var i, j, n = nodes.length,\n        // dimensions of this node\n        node, my_padding, my_w, my_h, my_x, my_y,\n        // often used multiples\n        my_w2, my_h2, my_wh,\n        // dimensions of the other node \n        other, other_padding, other_w, other_h, other_x, other_y,\n        // distance between nodes\n        dist_x, dist_y,\n        // components for the overall result\n        force_ratio, dist, gap, repulsion, x_component, y_component,\n        // computing elliptical force \n        g, g2, x1, y1, x2, y2, d1, d2,\n        force_ratio1, force_ratio2,\n        // parameters\n        myOuterRepulsion = outerRepulsion * 16;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      my_padding = +padding(node, i, nodes);\n      my_w = node.rx + my_padding;\n      my_h = node.ry + my_padding;\n      my_w2 = my_w * my_w;\n      my_h2 = my_h * my_h;\n      my_wh = my_w * my_h;\n      my_x = node.x + node.vx;\n      my_y = node.y + node.vy;\n\n      for (j = 0; j < n; ++j) {\n          if (j == i) {\n              continue;             \n          }\n          other = nodes[j];\n          other_padding = +padding(other, j, nodes);\n          other_w = other.rx + other_padding;\n          other_h = other.ry + other_padding;\n          other_x = other.x + other.vx;\n          other_y = other.y + other.vy;\n          dist_x = my_x - other_x;\n          dist_y = my_y - other_y;\n          if (dist_x == 0 && dist_y == 0) {\n              node.vx += (Math.random() * 4) - 2;\n              node.vy += (Math.random() * 4) - 2;  \n              continue;            \n          } else if (dist_x == 0) {\n              force_ratio = (my_h / my_w + other_h / other_w) / 2;\n              dist = Math.abs(dist_y);\n              gap = dist - my_h - other_h;\n          } else if (dist_y == 0) {\n              force_ratio = 1;\n              dist = Math.abs(dist_x);\n              gap = dist - my_w - other_w;\n          } else {\n              // ellipse is defined as  x^2   y^2\n              //                        --- + --- = 1\n              //                        w^2   h^2\n              // here x,y are points on ellipse's arc. \n              // we have a line going between center points of two ellipses and we want to know\n              // the point where it crosses the ellipse's arc. Because we know the line, we\n              // know that y = g * x, where    \n              g = dist_y / dist_x;\n              // now the only unknown in ellipse above is x, and thus we can find it by  \n              // moving pieces around (pen and paper work). equation becomes: \n              //             w * h\n              // x = ---------------------\n              //     sqrt(h^2 + g^2 * w^2)\n\n              g2 = g * g;\n              x1 = my_wh / Math.sqrt(my_h2 + g2 * my_w2);\n              y1 = g * x1;\n              // the length of the little bit from the center of ellipse to its margin. \n              // For circle it would be 'r', but for ellipse it varies. \n              d1 = Math.sqrt(x1 * x1 + y1 * y1);\n              // Strength of force that this ellipse eminates is modified by ratio of this bit \n              // to the ellipse's width. (It doesn't matter if we use width or height as reference\n              // point)  \n              force_ratio1 = d1 / my_w;\n              // And same for the other ellipse:\n              x2 = (other_w * other_h) / Math.sqrt(other_h * other_h + g2 * other_w * other_w)\n              y2 = g * x2\n              d2 = Math.sqrt(x2 * x2 + y2 * y2);\n              force_ratio2 = d2 / other_w;\n              // now we can calculate the gap or overlap between two ellipses, and force ratio on \n              // how strongly they should push as average of their force_ratios\n              dist = Math.sqrt(dist_x * dist_x + dist_y * dist_y);\n              gap = dist - d2 - d1;\n              force_ratio = (force_ratio1 + force_ratio2) / 2;\n          }\n          x_component = dist_x / dist;\n          y_component = dist_y / dist;\n          if (gap < 0) { // force GROWS as gap goes further into negative\n              repulsion = Math.min(Math.max(1.0, innerRepulsion * force_ratio * -gap), 5.0);\n              node.vx += repulsion * x_component;\n              node.vy += repulsion * y_component;              \n          } else { // force DIMINISHES as gap becomes larger\n              repulsion = Math.min(20.0, (force_ratio * myOuterRepulsion * alpha) / gap)\n              node.vx += repulsion * x_component\n              node.vy += repulsion * y_component\n          }\n      }\n    }\n  }\n\n  force.initialize = function(my_nodes) {\n    nodes = my_nodes;\n  };\n\n  force.outerRepulsion = function(my_outerRepulsion) {\n    if (arguments.length) {\n      outerRepulsion = +my_outerRepulsion;\n      return force;\n    } else {\n      return outerRepulsion;\n    }\n  };\n\n  force.innerRepulsion = function(my_innerRepulsion) {\n    if (arguments.length) {\n      innerRepulsion = +my_innerRepulsion;\n      return force;\n    } else {\n      return innerRepulsion;\n    }\n  };\n\n  force.padding = function(my_padding) {\n    if (arguments.length) {\n      if (typeof my_padding  === \"function\") {\n        padding = my_padding;\n      } else {\n        padding = constant(+my_padding);\n      }      \n      return force;\n    } else {\n      return padding;\n    }\n  };\n\n\n  return force;\n}\n","E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\HistoryRecord.tsx",["100"],{"ruleId":"101","severity":1,"message":"102","line":20,"column":6,"nodeType":"103","messageId":"104","endLine":20,"endColumn":11},{"ruleId":"101","severity":1,"message":"105","line":215,"column":95,"nodeType":"103","messageId":"104","endLine":215,"endColumn":109},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"101","severity":1,"message":"102","line":6,"column":6,"nodeType":"103","messageId":"104","endLine":6,"endColumn":11},{"ruleId":"110","severity":1,"message":"111","line":56,"column":81,"nodeType":"112","messageId":"113","endLine":56,"endColumn":83},{"ruleId":"110","severity":1,"message":"111","line":77,"column":81,"nodeType":"112","messageId":"113","endLine":77,"endColumn":83},{"ruleId":"101","severity":1,"message":"114","line":131,"column":40,"nodeType":"103","messageId":"104","endLine":131,"endColumn":49},{"ruleId":"106","replacedBy":"115"},{"ruleId":"108","replacedBy":"116"},{"ruleId":"101","severity":1,"message":"117","line":48,"column":15,"nodeType":"103","messageId":"104","endLine":48,"endColumn":21},{"ruleId":"101","severity":1,"message":"102","line":15,"column":6,"nodeType":"103","messageId":"104","endLine":15,"endColumn":11},{"ruleId":"118","severity":1,"message":"119","line":95,"column":21,"nodeType":"120","endLine":95,"endColumn":168},{"ruleId":"101","severity":1,"message":"121","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":28},{"ruleId":"122","severity":1,"message":"123","line":40,"column":63,"nodeType":"124","messageId":"125","endLine":40,"endColumn":65},{"ruleId":"101","severity":1,"message":"102","line":26,"column":6,"nodeType":"103","messageId":"104","endLine":26,"endColumn":11},{"ruleId":"101","severity":1,"message":"114","line":111,"column":40,"nodeType":"103","messageId":"104","endLine":111,"endColumn":49},{"ruleId":"110","severity":1,"message":"111","line":120,"column":59,"nodeType":"112","messageId":"113","endLine":120,"endColumn":61},{"ruleId":"101","severity":1,"message":"126","line":123,"column":21,"nodeType":"103","messageId":"104","endLine":123,"endColumn":26},{"ruleId":"110","severity":1,"message":"111","line":131,"column":59,"nodeType":"112","messageId":"113","endLine":131,"endColumn":61},{"ruleId":"127","severity":1,"message":"128","line":7,"column":1,"nodeType":"129","endLine":155,"endColumn":2},{"ruleId":"122","severity":1,"message":"130","line":44,"column":17,"nodeType":"124","messageId":"125","endLine":44,"endColumn":19},{"ruleId":"122","severity":1,"message":"130","line":55,"column":22,"nodeType":"124","messageId":"125","endLine":55,"endColumn":24},{"ruleId":"122","severity":1,"message":"130","line":55,"column":37,"nodeType":"124","messageId":"125","endLine":55,"endColumn":39},{"ruleId":"122","severity":1,"message":"130","line":59,"column":29,"nodeType":"124","messageId":"125","endLine":59,"endColumn":31},{"ruleId":"122","severity":1,"message":"130","line":63,"column":29,"nodeType":"124","messageId":"125","endLine":63,"endColumn":31},{"ruleId":"110","severity":1,"message":"111","line":62,"column":51,"nodeType":"112","messageId":"113","endLine":62,"endColumn":53},"@typescript-eslint/no-unused-vars","'edges' is defined but never used.","Identifier","unusedVar","'attrCheckedBox' is assigned a value but never used.","no-native-reassign",["131"],"no-negated-in-lhs",["132"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'focusNode' is assigned a value but never used.",["131"],["132"],"'suffix' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'createNonNullChain' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'count' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]