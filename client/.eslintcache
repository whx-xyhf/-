[{"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx":"1","E:\\GDesign\\program\\client\\src\\App.tsx":"2","E:\\GDesign\\program\\client\\src\\index.tsx":"3","E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx":"4","E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx":"5","E:\\GDesign\\program\\client\\src\\reportWebVitals.ts":"6","E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx":"7","E:\\GDesign\\program\\client\\src\\components\\Info.tsx":"8","E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx":"9","E:\\GDesign\\program\\client\\src\\components\\Table.tsx":"10","E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx":"11","E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx":"12","E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx":"13","E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx":"14","E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js":"15","E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx":"16","E:\\GDesign\\program\\client\\src\\components\\HistoryRecord.tsx":"17","E:\\GDesign\\program\\client\\src\\components\\http.ts":"18"},{"size":19348,"mtime":1616678650137,"results":"19","hashOfConfig":"20"},{"size":24112,"mtime":1616651544314,"results":"21","hashOfConfig":"20"},{"size":457,"mtime":1611729263800,"results":"22","hashOfConfig":"20"},{"size":3936,"mtime":1616139152494,"results":"23","hashOfConfig":"20"},{"size":6876,"mtime":1615800211777,"results":"24","hashOfConfig":"20"},{"size":425,"mtime":1609982263790,"results":"25","hashOfConfig":"20"},{"size":2794,"mtime":1613826547908,"results":"26","hashOfConfig":"20"},{"size":5567,"mtime":1616241671727,"results":"27","hashOfConfig":"20"},{"size":17738,"mtime":1616637984542,"results":"28","hashOfConfig":"20"},{"size":4058,"mtime":1611406252995,"results":"29","hashOfConfig":"20"},{"size":14546,"mtime":1616245291146,"results":"30","hashOfConfig":"20"},{"size":8938,"mtime":1616247858859,"results":"31","hashOfConfig":"20"},{"size":3184,"mtime":1614588853461,"results":"32","hashOfConfig":"20"},{"size":8056,"mtime":1616648961292,"results":"33","hashOfConfig":"20"},{"size":5702,"mtime":1615529771241,"results":"34","hashOfConfig":"20"},{"size":17818,"mtime":1616680147237,"results":"35","hashOfConfig":"20"},{"size":4008,"mtime":1616241645788,"results":"36","hashOfConfig":"20"},{"size":1108,"mtime":1616341734386,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pde34m",{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx",[],"E:\\GDesign\\program\\client\\src\\App.tsx",["83","84","85","86","87","88"],"E:\\GDesign\\program\\client\\src\\index.tsx",[],["89","90"],"E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx",["91","92","93"],"E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx",["94"],"import * as React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n//定义边数组\r\ntype edges=Array<number>;\r\n\r\ninterface Props{\r\n    graph:{\r\n        id:number,\r\n        // nodes:Array<number>,\r\n        // edges:Array<edges>,\r\n        [propName:string]:any,\r\n    },\r\n    [propName: string]: any;\r\n}\r\ninterface Link{\r\n    source:any,\r\n    target:any,\r\n    [propName: string]: any;\r\n}\r\n\r\nclass NodeLink extends React.Component<Props,any>{\r\n    private svgRef:React.RefObject<SVGSVGElement>;\r\n    public svgWidth:number=0;\r\n    public svgHeight:number=0;\r\n    public padding={top:10,bottom:10,left:10,right:10};\r\n    public circleR:string=\"3.5px\";\r\n    constructor(props:Props){\r\n        super(props);\r\n        this.svgRef=React.createRef();\r\n        this.state={layOutNodes:[],layOutLinks:[]};\r\n        this.forceLayout=this.forceLayout.bind(this);\r\n    }\r\n    forceLayout(nodes:Array<number>,edges:Array<edges>,width:number,height:number):void{\r\n        let nodesid=nodes.map((value:number)=>{\r\n            return {id:value,x:0,y:0};\r\n        })\r\n\r\n        let links:Array<Link>=edges.map((value:edges)=>{\r\n            return {source:value[0],target:value[1]};\r\n        });\r\n        // console.log(nodesid,links)\r\n        d3.forceSimulation(nodesid)\r\n        .force(\"link\", d3.forceLink(links).id(d=>d.id))\r\n        .force(\"charge\", d3.forceManyBody())\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n        .on('tick', function () {\r\n            // console.log(\"waiting...\");\r\n        })\r\n        .on(\"end\",()=>{\r\n            // console.log(\"布局完成！\");\r\n            // console.log(links)\r\n            let x_max:number=d3.max(nodesid,(d:d3.SimulationNodeDatum):number=>d.x || 0) || 0;\r\n            let x_min:number=d3.min(nodesid,(d:d3.SimulationNodeDatum):number=>d.x || 0) || 0;\r\n            let y_max:number=d3.max(nodesid,(d:d3.SimulationNodeDatum):number=>d.y || 0) || 0;\r\n            let y_min:number=d3.min(nodesid,(d:d3.SimulationNodeDatum):number=>d.y || 0) || 0;\r\n            \r\n            \r\n                \r\n                new Promise((resolve:any,reject:any)=>{\r\n                    //获取纵横比\r\n                    let height_force=y_max-y_min;\r\n                    let width_force=x_max-x_min;\r\n                    let scaleWidth=this.svgWidth/4*3;\r\n                    let scaleHeight=this.svgHeight/4*3;\r\n                    if(x_max>=this.svgWidth || x_min<=0 || y_min<=0 || y_max>=this.svgHeight){\r\n                        scaleWidth=this.svgWidth;\r\n                        scaleHeight=this.svgHeight;\r\n                    }\r\n                    \r\n                    if(height_force>width_force){\r\n                        scaleWidth=(scaleHeight*width_force)/height_force;\r\n                        if(scaleWidth>this.svgWidth){\r\n                            scaleWidth=this.svgWidth;\r\n                            scaleHeight=(scaleWidth*height_force)/width_force;\r\n                        }\r\n                    }\r\n                    else{\r\n                        scaleHeight=(scaleWidth*height_force)/width_force;\r\n                        if(scaleHeight>this.svgHeight){\r\n                            scaleHeight=this.svgHeight;\r\n                            scaleWidth=(scaleHeight*width_force)/height_force;\r\n                        }\r\n                    }\r\n                    let xScale: d3.ScaleLinear<number, number>=d3.scaleLinear().domain([x_min,x_max]).range([(this.svgWidth-scaleWidth)/2+this.padding.left,(this.svgWidth-scaleWidth)/2+scaleWidth-this.padding.right]);\r\n                    let yScale: d3.ScaleLinear<number, number>=d3.scaleLinear().domain([y_min,y_max]).range([(this.svgHeight-scaleHeight)/2+this.padding.top,(this.svgHeight-scaleHeight)/2+scaleHeight-this.padding.bottom]);\r\n                    \r\n                    \r\n                    let newNodes=[];\r\n                    for(let i=0;i<nodesid.length;i++){\r\n                        newNodes.push({\r\n                            id:nodesid[i].id,\r\n                            x:xScale(nodesid[i].x),\r\n                            y:yScale(nodesid[i].y)\r\n                        })\r\n                    }\r\n                   \r\n                    let newLinks=[];\r\n                    for(let i=0;i<links.length;i++){\r\n                        newLinks.push({\r\n                            index:links[i].index,\r\n                            source:{id:links[i].source.id,x:xScale(links[i].source.x),y:yScale(links[i].source.y)},\r\n                            target:{id:links[i].target.id,x:xScale(links[i].target.x),y:yScale(links[i].target.y)}\r\n                        })\r\n                    }\r\n                    \r\n                    resolve([newNodes,newLinks]);\r\n                }).then((res:any)=>{\r\n                    // console.log(res[0])\r\n                    this.setState({layOutNodes:res[0],layOutLinks:res[1]});\r\n                })\r\n            \r\n            // else{\r\n                \r\n            //     this.setState({layOutNodes:nodesid,layOutLinks:links});\r\n            // }\r\n            \r\n            // this.setState({layOutNodes:nodesid,layOutLinks:links});\r\n        })\r\n    }\r\n    componentDidMount():void{\r\n        this.svgWidth=this.svgRef.current?.clientWidth || 0;\r\n        this.svgHeight=this.svgRef.current?.clientHeight || 0;\r\n        this.forceLayout(this.props.graph.nodes,this.props.graph.edges,this.svgWidth,this.svgHeight);\r\n    }\r\n    componentWillReceiveProps(nextProps:Props):void{\r\n        this.forceLayout(nextProps.graph.nodes,nextProps.graph.edges,this.svgWidth,this.svgHeight);\r\n    }\r\n    render():React.ReactElement{\r\n        // console.log(this.state.layOutNodes)\r\n        const {layOutNodes,layOutLinks,focusNode}=this.state;\r\n        let nodes=layOutNodes.map((value:any,index:number)=>{\r\n            return <circle r={this.circleR} cx={value.x} cy={value.y} key={index} fill=\"#ccc\" strokeWidth=\"1px\" stroke=\"white\" cursor='pointer'></circle>\r\n        })\r\n        let links=layOutLinks.map((value:any)=>{\r\n            return <line x1={value.source.x} y1={value.source.y} x2={value.target.x} \r\n            y2={value.target.y} fill=\"none\" strokeWidth=\"1px\" stroke=\"#ccc\" key={value.index}></line>\r\n        })\r\n        return (\r\n            <svg ref={this.svgRef} style={{width:'100%',height:'100%'}} onClick={this.props.onClick?this.props.onClick.bind(this.props.parent,this.props.graph,this.state.layOutNodes,this.state.layOutLinks,this.props.graph.id):null}>\r\n                {/* <text x=\"0\"y='20'>{this.props.graph.year}</text> */}\r\n                <g>{links}</g>\r\n                <g>{nodes}</g>\r\n                {/* <text x={focusNode.x?focusNode.x:null} y={focusNode.y?focusNode.y:null} fontSize='0.6rem'>\r\n                    {focusNode.id?this.props.graph['authorInfo'][focusNode.id]['name']:''}\r\n                </text> */}\r\n            </svg>\r\n        )\r\n    }\r\n}\r\nexport default NodeLink;",["95","96"],"E:\\GDesign\\program\\client\\src\\reportWebVitals.ts",[],["97","98"],"E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx",["99"],"E:\\GDesign\\program\\client\\src\\components\\Info.tsx",["100","101"],"import * as React from 'react';\r\n// import NodeLink from './NodeLink';\r\nimport PNodeLink from './PNodeLink';\r\nimport PTargetTree from './PTargetTree';\r\nimport HistoryRecord from './HistoryRecord';\r\nimport axios from 'axios';\r\nimport graphURL from '../assets/graph.png';\r\nimport graphSelectURL from '../assets/graph_select.png';\r\nimport tableURL from '../assets/table.png';\r\nimport tableSelectURL from '../assets/table_select.png';\r\nimport historyURl from '../assets/history.png';\r\nimport historySelectURL from '../assets/history_select.png';\r\n\r\n\r\ntype edges = Array<number>;\r\ntype graph = {\r\n    id: number,\r\n    // nodes:Array<number>,\r\n    // edges:Array<edges>,\r\n    [propName: string]: any,\r\n}\r\n\r\ninterface Props {\r\n    graphs: Array<graph>,\r\n    url: string,\r\n    num: number,//匹配数量\r\n    parent: any,\r\n    dimensions: number,\r\n    strWeight: number,\r\n    attrWeight: number,\r\n    attrChecked: attr,\r\n    attrValue: attr,\r\n    dataType: string,\r\n}\r\ntype attr = {\r\n    [propName: string]: any,\r\n}\r\n\r\nclass Info extends React.Component<Props, any>{\r\n    private icons: Array<string> = [graphURL, tableURL, historyURl];\r\n    private selectIcos: Array<string> = [graphSelectURL, tableSelectURL, historySelectURL];\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = { selectNum: 0 }\r\n        this.match = this.match.bind(this);\r\n        this.changePage=this.changePage.bind(this);\r\n    }\r\n    match(graph: graph): void {//匹配相似图\r\n        const { url, dimensions, strWeight, attrWeight, attrChecked, attrValue, dataType } = this.props;\r\n        let checkedArr: any = [];\r\n        for (let key in attrChecked) {\r\n            checkedArr.push({ name: key, value: attrChecked[key] })\r\n        }\r\n        axios.post(url + '/matchGraph', { wd: graph, dataType: dataType, num: this.props.num, dimensions: dimensions, strWeight: strWeight, attrWeight: attrWeight, attrChecked: checkedArr, attrValue: attrValue })\r\n            .then(res => {\r\n                this.props.parent.setChoosePoints(res.data.data);\r\n            })\r\n        axios.post(url + '/searchGraphByGraphId', { wd: graph.id, dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n            .then(res => {\r\n                // console.log(res.data.data[0]);\r\n                this.props.parent.setCenterPoint(res.data.data[0]);\r\n            })\r\n\r\n    }\r\n    changePage(number:number):void{\r\n        this.setState({selectNum:number});\r\n    }\r\n    render(): React.ReactElement {\r\n        const {dimensions,attrChecked,dataType,url,parent,attrWeight,strWeight}=this.props;\r\n        let components:any=[];\r\n        let elements = this.props.graphs.map((graph: graph, index: number) => {\r\n            let el = null;\r\n            if (this.props.dataType === \"Author\") {\r\n                el = <PNodeLink graph={graph} key={index} />;\r\n            }\r\n            else if (this.props.dataType === \"Family\") {\r\n                el = <PTargetTree graph={graph} key={index} />\r\n            }\r\n            return (\r\n                <div className='infoBox' key={index} style={{ width: \"100%\",height:'100%',float:'left' }}>\r\n\r\n                    <div style={{ height: '100%', width: '100%', float: 'left' }}>\r\n                        {el}\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n        })\r\n        components.push(elements) \r\n        components.push(<p>table</p>)\r\n        components.push(<HistoryRecord attrWeight={attrWeight} strWeight={strWeight} parent={parent} changePage={this.changePage} url={url+'/readHistoryRecord'} display={this.state.selectNum===2?true:false} dimensions={dimensions} attrChecked={attrChecked} dataType={dataType}/>)\r\n        let iconsEl = this.icons.map((value: string, index: number) => {\r\n            return (\r\n                <div style={{ width: '100%', height: '40px', borderBottom:'1px solid #ccc',borderRight:'1px solid #ccc',cursor:'pointer'}} key={index} >\r\n                    <img src={this.state.selectNum === index ? this.selectIcos[index] : value} width=\"100%\" height=\"100%\" onClick={this.changePage.bind(this,index)} />\r\n                </div>\r\n            )\r\n        })\r\n\r\n        let pageEl=this.icons.map((value:string,index:number)=>{\r\n            let translate=`translate(0,-${this.state.selectNum*100}%)`;\r\n            return(\r\n                <div key={index} style={{ width: \"100%\" ,height:'100%',transform:translate,display:'inline-block',float:'left'}}>\r\n                    {components[index]}\r\n                </div>\r\n            )\r\n        })\r\n        return (\r\n            <div className='info'>\r\n                {/* <input type=\"button\" value=\"match\" onClick={this.match.bind(this,graph)}></input> */}\r\n                {/* <div className=\"infoName\" style={{\r\n                    height: '100%', width: '50px', fontSize: '0.5rem', float: 'left',\r\n                    overflowX: 'hidden', overflowY: 'auto', backgroundColor: 'rgb(254,254,254)', border: '1px solid #ccc',\r\n                    borderTop: 'none', boxSizing: 'border-box'\r\n                }}>\r\n                    {iconsEl}\r\n                </div> */}\r\n                \r\n                <div style={{width: \"100%\" ,height:'100%',float:\"left\"}}>\r\n                    {pageEl}\r\n                </div>\r\n                <div style={{position:'absolute',top:'0',left:'0',width:'40px',height:'auto'}}>\r\n                    {iconsEl}\r\n                </div>\r\n            </div>\r\n        )\r\n        //,wordWrap:'break-word',wordBreak:'normal'\r\n    }\r\n}\r\n\r\nexport default Info;",["102","103"],"E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\Table.tsx",["104"],"E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx",["105"],"import * as React from 'react';\r\nimport axios from 'axios';\r\nimport * as d3 from 'd3';\r\n\r\ntype attr = {\r\n    [propName: string]: any,\r\n}\r\n\r\ninterface Props {\r\n    url: string,\r\n    parent: any,\r\n    dimensions: number,\r\n    attrWeight: number,\r\n    strWeight: number,\r\n    attrChecked: attr,\r\n    choosePoints: Array<ChoosePointData>,//匹配的数据\r\n    centerPoint: ChoosePointData,\r\n    display: string,\r\n    dataType: string,\r\n    graphType: string,//结构还是属性\r\n    x: string,//x轴字段\r\n    y: string,//y轴字段\r\n    personGraphs:Array<attr>,\r\n}\r\n//定义边数组\r\ntype edges = Array<number>;\r\n//定义散点数据接口\r\ntype ChoosePointData = {\r\n    id: number,\r\n    // nodes: Array<number>,\r\n    // edges:Array<edges>,\r\n    [propName: string]: any,\r\n}\r\nclass DistributeAttr extends React.Component<Props, any>{\r\n\r\n    private svgRef: React.RefObject<SVGSVGElement>;\r\n    public padding = { top: 20, bottom: 30, left: 30, right: 20 };\r\n    public svgWidth: number = 0;\r\n    public svgHeight: number = 0;\r\n    public lightColor: string = 'orange';\r\n    public centerColor: string = 'red';\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = { data: [], choosePoints: [], centerPoint: null };\r\n        this.svgRef = React.createRef();\r\n        this.compute = this.compute.bind(this);\r\n        this.searchGraph = this.searchGraph.bind(this);\r\n    }\r\n\r\n    compute(data: any, xAttr: string, yAttr: string): void {\r\n        const { graphType } = this.props;\r\n        let x_min_max = d3.extent(data, (d: any) => d[graphType][xAttr]);\r\n        // x_min_max[0]=0;\r\n        let y_min_max = d3.extent(data, (d: any) => d[graphType][yAttr]);\r\n        // y_min_max[0]=0;\r\n        let xscale = d3.scaleLinear(x_min_max, [this.padding.left, this.svgWidth - this.padding.right]);\r\n        let yscale = d3.scaleLinear(y_min_max, [this.svgHeight - this.padding.bottom, this.padding.top]);\r\n\r\n        data.forEach((value: any) => {\r\n            value.x = xscale(value[graphType][xAttr]);\r\n            value.y = yscale(value[graphType][yAttr]);\r\n        });\r\n\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .selectAll(\"g\")\r\n            .remove();\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".text\")\r\n            .selectAll(\"g\")\r\n            .remove();\r\n\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(-2,${this.svgHeight - this.padding.bottom + 2})`)\r\n            .call(d3.axisBottom(xscale).ticks(8))\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(${this.padding.left - 2},2)`)\r\n            .call(d3.axisLeft(yscale).ticks(5))\r\n\r\n        this.setState({ data: data });\r\n\r\n    }\r\n    \r\n    searchGraph(pointData: ChoosePointData): void {//根据名字搜索包含该节点的网络\r\n        const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = this.props;\r\n        let checkedArr: any = [];\r\n        for (let key in attrChecked) {\r\n            checkedArr.push({ name: key, value: attrChecked[key] })\r\n        }\r\n        axios.post(url + '/searchGraphByGraphId', { wd: pointData.id, dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n            .then(res => {\r\n                // console.log(res.data.data);\r\n                this.props.parent.setPersonGraphs(res.data.data);\r\n            })\r\n        this.setState({ centerPoint: pointData });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.svgWidth = this.svgRef.current?.clientWidth || 0;\r\n        this.svgHeight = this.svgRef.current?.clientHeight || 0;\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps: Props): void {\r\n        if (nextProps.choosePoints !== this.props.choosePoints) {\r\n            let choosePoints = [];\r\n            for (let j in nextProps.choosePoints) {\r\n                for (let i in this.state.data) {\r\n                    if (this.state.data[i].id === nextProps.choosePoints[j].id) {\r\n                        choosePoints.push(this.state.data[i]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.setState({ choosePoints: choosePoints });\r\n        }\r\n        if (nextProps.centerPoint !== this.props.centerPoint) {\r\n            for (let i in this.state.data) {\r\n                if (this.state.data[i].id === nextProps.centerPoint.id) {\r\n                    this.setState({ centerPoint: this.state.data[i] });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (nextProps.attrChecked !== this.props.attrChecked && nextProps.x!=='') {\r\n            const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = nextProps;\r\n            let checkedArr: any = [];\r\n            for (let key in attrChecked) {\r\n                checkedArr.push({ name: key, value: attrChecked[key] })\r\n            }\r\n            axios.post(url, { dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n                .then(res => {\r\n                    const data = res.data.data;\r\n                    let { x, y } = nextProps;\r\n                    this.compute(data, x, y);\r\n                })\r\n        }\r\n        if ((nextProps.x !== this.props.x || nextProps.y !== this.props.y)) {\r\n            const { data } = this.state;\r\n            const { x, y } = nextProps;\r\n\r\n            if (data.length > 0) {\r\n                    this.compute(data, x, y);    \r\n            }\r\n            else{\r\n                \r\n                const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = nextProps;\r\n                let checkedArr: any = [];\r\n                for (let key in attrChecked) {\r\n                    checkedArr.push({ name: key, value: attrChecked[key] })\r\n                }\r\n                axios.post(url, { dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n                    .then(res => {\r\n                        const data = res.data.data;\r\n                        let { x, y } = nextProps;\r\n                        this.compute(data, x, y);\r\n                    })\r\n            }\r\n        }\r\n        if(nextProps.dataType!==this.props.dataType){\r\n            this.setState({data:[],centerPoint:null,choosePoints:[]});\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render(): React.ReactElement {\r\n        const { data, centerPoint, choosePoints} = this.state;\r\n        const {x,y,display,graphType,personGraphs} = this.props;\r\n        let allPointEl = data.map((value: any, index: number) =>\r\n            <circle key={index} cx={value.x} cy={value.y} r='2px' fill='#1890ff' fillOpacity={0.4} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, value)}></circle>\r\n        )\r\n        \r\n        //centerPoint\r\n        //点击的点，需要匹配的点\r\n        let centerPointEl = null;\r\n        if (centerPoint != null) {\r\n            centerPointEl = <circle r=\"2px\" cx={centerPoint.x} cy={centerPoint.y} fill={this.centerColor} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, centerPoint)}></circle>\r\n        }\r\n        //圈选的点，匹配到的点\r\n        let pointsChooseEl = choosePoints.map((value: ChoosePointData, index: number) =>\r\n            <circle r=\"2px\" cx={value.x} cy={value.y} key={index} fill={this.lightColor} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, value)}></circle>\r\n        )\r\n\r\n        //点击的点，试选阶段\r\n        let persongraphs = personGraphs.map((value: any, index: number) =>{\r\n            for(let i=0;i<data.length;i++){\r\n                if(data[i].id===value.id){\r\n                    return <circle r=\"2px\" cx={data[i].x} cy={data[i].y} key={index} fill={this.centerColor} stroke='white' strokeWidth='0.5px'\r\n                    onClick={this.searchGraph.bind(this, value)}></circle>\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        )\r\n\r\n        return (\r\n            <div className=\"distributeAttr\" style={{ position: 'absolute', left: display === '0' ? '-100%' : '0' }}>\r\n                \r\n                <svg style={{ width: '100%', height: '100%' }} ref={this.svgRef} id={'svg_' + graphType}>\r\n                    <g className=\"axis\"></g>\r\n                    <g className=\"text\"></g>\r\n                    <text x={this.svgWidth-50} y={this.svgHeight-40}>{x}</text>\r\n                    <text x='5px' y='15px'>{y}</text>\r\n                    {allPointEl}\r\n                    {pointsChooseEl}\r\n                    {centerPointEl}\r\n                    {persongraphs}\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DistributeAttr;","E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx",["106","107"],"E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js",["108","109","110","111","112","113"],"function constant(x) {\n  return function() {\n    return x;\n  };\n}\n\nexport default function (padding, innerRepulsion, outerRepulsion) {\n  var nodes;\n  \n  if (typeof padding !== \"function\") padding = constant(padding == null ? 4 : +padding);\n  innerRepulsion = innerRepulsion == null ? 0.5 : +innerRepulsion;\n  outerRepulsion = outerRepulsion == null ? 0.5 : +outerRepulsion;\n\n  function force(alpha) {\n    var i, j, n = nodes.length,\n        // dimensions of this node\n        node, my_padding, my_w, my_h, my_x, my_y,\n        // often used multiples\n        my_w2, my_h2, my_wh,\n        // dimensions of the other node \n        other, other_padding, other_w, other_h, other_x, other_y,\n        // distance between nodes\n        dist_x, dist_y,\n        // components for the overall result\n        force_ratio, dist, gap, repulsion, x_component, y_component,\n        // computing elliptical force \n        g, g2, x1, y1, x2, y2, d1, d2,\n        force_ratio1, force_ratio2,\n        // parameters\n        myOuterRepulsion = outerRepulsion * 16;\n\n    for (i = 0; i < n; ++i) {\n      node = nodes[i];\n      my_padding = +padding(node, i, nodes);\n      my_w = node.rx + my_padding;\n      my_h = node.ry + my_padding;\n      my_w2 = my_w * my_w;\n      my_h2 = my_h * my_h;\n      my_wh = my_w * my_h;\n      my_x = node.x + node.vx;\n      my_y = node.y + node.vy;\n\n      for (j = 0; j < n; ++j) {\n          if (j == i) {\n              continue;             \n          }\n          other = nodes[j];\n          other_padding = +padding(other, j, nodes);\n          other_w = other.rx + other_padding;\n          other_h = other.ry + other_padding;\n          other_x = other.x + other.vx;\n          other_y = other.y + other.vy;\n          dist_x = my_x - other_x;\n          dist_y = my_y - other_y;\n          if (dist_x == 0 && dist_y == 0) {\n              node.vx += (Math.random() * 4) - 2;\n              node.vy += (Math.random() * 4) - 2;  \n              continue;            \n          } else if (dist_x == 0) {\n              force_ratio = (my_h / my_w + other_h / other_w) / 2;\n              dist = Math.abs(dist_y);\n              gap = dist - my_h - other_h;\n          } else if (dist_y == 0) {\n              force_ratio = 1;\n              dist = Math.abs(dist_x);\n              gap = dist - my_w - other_w;\n          } else {\n              // ellipse is defined as  x^2   y^2\n              //                        --- + --- = 1\n              //                        w^2   h^2\n              // here x,y are points on ellipse's arc. \n              // we have a line going between center points of two ellipses and we want to know\n              // the point where it crosses the ellipse's arc. Because we know the line, we\n              // know that y = g * x, where    \n              g = dist_y / dist_x;\n              // now the only unknown in ellipse above is x, and thus we can find it by  \n              // moving pieces around (pen and paper work). equation becomes: \n              //             w * h\n              // x = ---------------------\n              //     sqrt(h^2 + g^2 * w^2)\n\n              g2 = g * g;\n              x1 = my_wh / Math.sqrt(my_h2 + g2 * my_w2);\n              y1 = g * x1;\n              // the length of the little bit from the center of ellipse to its margin. \n              // For circle it would be 'r', but for ellipse it varies. \n              d1 = Math.sqrt(x1 * x1 + y1 * y1);\n              // Strength of force that this ellipse eminates is modified by ratio of this bit \n              // to the ellipse's width. (It doesn't matter if we use width or height as reference\n              // point)  \n              force_ratio1 = d1 / my_w;\n              // And same for the other ellipse:\n              x2 = (other_w * other_h) / Math.sqrt(other_h * other_h + g2 * other_w * other_w)\n              y2 = g * x2\n              d2 = Math.sqrt(x2 * x2 + y2 * y2);\n              force_ratio2 = d2 / other_w;\n              // now we can calculate the gap or overlap between two ellipses, and force ratio on \n              // how strongly they should push as average of their force_ratios\n              dist = Math.sqrt(dist_x * dist_x + dist_y * dist_y);\n              gap = dist - d2 - d1;\n              force_ratio = (force_ratio1 + force_ratio2) / 2;\n          }\n          x_component = dist_x / dist;\n          y_component = dist_y / dist;\n          if (gap < 0) { // force GROWS as gap goes further into negative\n              repulsion = Math.min(Math.max(1.0, innerRepulsion * force_ratio * -gap), 5.0);\n              node.vx += repulsion * x_component;\n              node.vy += repulsion * y_component;              \n          } else { // force DIMINISHES as gap becomes larger\n              repulsion = Math.min(20.0, (force_ratio * myOuterRepulsion * alpha) / gap)\n              node.vx += repulsion * x_component\n              node.vy += repulsion * y_component\n          }\n      }\n    }\n  }\n\n  force.initialize = function(my_nodes) {\n    nodes = my_nodes;\n  };\n\n  force.outerRepulsion = function(my_outerRepulsion) {\n    if (arguments.length) {\n      outerRepulsion = +my_outerRepulsion;\n      return force;\n    } else {\n      return outerRepulsion;\n    }\n  };\n\n  force.innerRepulsion = function(my_innerRepulsion) {\n    if (arguments.length) {\n      innerRepulsion = +my_innerRepulsion;\n      return force;\n    } else {\n      return innerRepulsion;\n    }\n  };\n\n  force.padding = function(my_padding) {\n    if (arguments.length) {\n      if (typeof my_padding  === \"function\") {\n        padding = my_padding;\n      } else {\n        padding = constant(+my_padding);\n      }      \n      return force;\n    } else {\n      return padding;\n    }\n  };\n\n\n  return force;\n}\n","E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\HistoryRecord.tsx",["114"],"import * as React from 'react';\r\nimport axios from 'axios';\r\nimport NodeLink from './NodeLink';\r\nimport TargetTree from './TargetTree';\r\n\r\ninterface Props{\r\n    display:boolean;\r\n    url:string;\r\n    parent: any,\r\n    dimensions: number,\r\n    attrChecked: attr,\r\n    dataType: string,\r\n    changePage:any,\r\n    attrWeight:number,\r\n    strWeight:number\r\n}\r\ntype attr = {\r\n    [propName: string]: any,\r\n}\r\n\r\nclass HistoryRecord extends React.Component<Props, any>{\r\n    constructor(props:Props){\r\n        super(props);\r\n        this.state={record:[]};\r\n        this.getHistoryRecord=this.getHistoryRecord.bind(this);\r\n        this.selectCondidate=this.selectCondidate.bind(this);\r\n    }\r\n\r\n    getHistoryRecord(url:string,dimensions:number,attrChecked:attr,dataType:string,strWeight:number,attrWeight:number):void{\r\n        let checkedArr:any=[];\r\n        for(let key in attrChecked){\r\n            checkedArr.push({name:key,value:attrChecked[key]})\r\n        }\r\n        axios.post(url,{dimensions:dimensions,attrChecked:checkedArr,dataType:dataType,attrWeight:attrWeight,strWeight:strWeight})\r\n        .then(res=>{\r\n            if(res.data.data!==this.state.record)\r\n                this.setState({record:res.data.data});\r\n        })\r\n    }\r\n\r\n    selectCondidate(graph:any){\r\n        this.props.parent.setPersonGraphs([graph]);\r\n        this.props.changePage(0);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps:Props){\r\n        const {display,dimensions,attrChecked,dataType,strWeight,attrWeight}=this.props;\r\n        if(nextProps.display===true && nextProps.display!==display){\r\n            this.getHistoryRecord(nextProps.url,nextProps.dimensions,nextProps.attrChecked,nextProps.dataType,strWeight,attrWeight);\r\n        }\r\n        else if(nextProps.display===true && nextProps.display===display){\r\n            if(nextProps.dimensions!==dimensions || nextProps.dataType!==dataType || nextProps.attrChecked!==attrChecked){\r\n                this.getHistoryRecord(nextProps.url,nextProps.dimensions,nextProps.attrChecked,nextProps.dataType,strWeight,attrWeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    render():React.ReactElement{\r\n\r\n        const {record}=this.state;\r\n        const {dataType,parent}=this.props;\r\n        let el=record.map((value:any,index:number)=>{\r\n            if(dataType==='Author')\r\n                return (\r\n                    <div className=\"forceBox\" key={index}>\r\n                    <div className=\"condidateBox\" >\r\n                        <div className=\"candidateTitle\">\r\n                            Graph:{value.graph.id}<br/>\r\n                            Date:{value.date.split(' ')[0]}\r\n                        </div>\r\n                        <div className=\"candidateContent\">\r\n                            <NodeLink graph={value.graph} onClick={this.selectCondidate} parent={parent}/>\r\n                        </div>\r\n                    </div>\r\n                    </div>\r\n                )\r\n            else if(dataType==='Family')\r\n                return (\r\n                    <div className=\"forceBox\" key={index}>\r\n                    <div className=\"condidateBox\">\r\n                        <div className=\"candidateTitle\">\r\n                            Graph:{value.graph.id}<br/>\r\n                            Date:{value.date.split(' ')[0]}\r\n                        </div>\r\n                        <div className=\"candidateContent\">\r\n                            <TargetTree graph={value.graph} onClick={this.selectCondidate} parent={parent}/>\r\n                        </div>\r\n\r\n                    </div>\r\n                    </div>\r\n                )\r\n        })\r\n\r\n        return (\r\n            <div style={{width:'100%',height:'100%'}}>\r\n                <div style={{width:'40px',height:'100%',float:'left'}}>\r\n\r\n                </div>\r\n                <div style={{width:'calc(100% - 40px)',height:'100%',float:'left'}}>\r\n                    {el}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HistoryRecord;","E:\\GDesign\\program\\client\\src\\components\\http.ts",[],{"ruleId":"115","severity":1,"message":"116","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":19},{"ruleId":"115","severity":1,"message":"119","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":20},{"ruleId":"115","severity":1,"message":"120","line":6,"column":8,"nodeType":"117","messageId":"118","endLine":6,"endColumn":16},{"ruleId":"115","severity":1,"message":"121","line":20,"column":6,"nodeType":"117","messageId":"118","endLine":20,"endColumn":11},{"ruleId":"115","severity":1,"message":"122","line":218,"column":104,"nodeType":"117","messageId":"118","endLine":218,"endColumn":118},{"ruleId":"115","severity":1,"message":"123","line":241,"column":77,"nodeType":"117","messageId":"118","endLine":241,"endColumn":87},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"115","severity":1,"message":"121","line":6,"column":6,"nodeType":"117","messageId":"118","endLine":6,"endColumn":11},{"ruleId":"128","severity":1,"message":"129","line":56,"column":81,"nodeType":"130","messageId":"131","endLine":56,"endColumn":83},{"ruleId":"128","severity":1,"message":"129","line":77,"column":81,"nodeType":"130","messageId":"131","endLine":77,"endColumn":83},{"ruleId":"115","severity":1,"message":"132","line":131,"column":40,"nodeType":"117","messageId":"118","endLine":131,"endColumn":49},{"ruleId":"124","replacedBy":"133"},{"ruleId":"126","replacedBy":"134"},{"ruleId":"124","replacedBy":"135"},{"ruleId":"126","replacedBy":"136"},{"ruleId":"115","severity":1,"message":"137","line":48,"column":15,"nodeType":"117","messageId":"118","endLine":48,"endColumn":21},{"ruleId":"115","severity":1,"message":"121","line":15,"column":6,"nodeType":"117","messageId":"118","endLine":15,"endColumn":11},{"ruleId":"138","severity":1,"message":"139","line":95,"column":21,"nodeType":"140","endLine":95,"endColumn":168},{"ruleId":"124","replacedBy":"141"},{"ruleId":"126","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":40,"column":63,"nodeType":"145","messageId":"146","endLine":40,"endColumn":65},{"ruleId":"115","severity":1,"message":"121","line":26,"column":6,"nodeType":"117","messageId":"118","endLine":26,"endColumn":11},{"ruleId":"115","severity":1,"message":"147","line":7,"column":8,"nodeType":"117","messageId":"118","endLine":7,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":145,"column":59,"nodeType":"130","messageId":"131","endLine":145,"endColumn":61},{"ruleId":"148","severity":1,"message":"149","line":7,"column":1,"nodeType":"150","endLine":155,"endColumn":2},{"ruleId":"143","severity":1,"message":"151","line":44,"column":17,"nodeType":"145","messageId":"146","endLine":44,"endColumn":19},{"ruleId":"143","severity":1,"message":"151","line":55,"column":22,"nodeType":"145","messageId":"146","endLine":55,"endColumn":24},{"ruleId":"143","severity":1,"message":"151","line":55,"column":37,"nodeType":"145","messageId":"146","endLine":55,"endColumn":39},{"ruleId":"143","severity":1,"message":"151","line":59,"column":29,"nodeType":"145","messageId":"146","endLine":59,"endColumn":31},{"ruleId":"143","severity":1,"message":"151","line":63,"column":29,"nodeType":"145","messageId":"146","endLine":63,"endColumn":31},{"ruleId":"128","severity":1,"message":"129","line":62,"column":51,"nodeType":"130","messageId":"131","endLine":62,"endColumn":53},"@typescript-eslint/no-unused-vars","'ScatterPlot' is defined but never used.","Identifier","unusedVar","'ForceCompute' is defined but never used.","'Parallel' is defined but never used.","'edges' is defined but never used.","'attrCheckedBox' is assigned a value but never used.","'reTsneData' is assigned a value but never used.","no-native-reassign",["152"],"no-negated-in-lhs",["153"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'focusNode' is assigned a value but never used.",["152"],["153"],["152"],["153"],"'suffix' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["152"],["153"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'paperURL' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]