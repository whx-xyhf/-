[{"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx":"1","E:\\GDesign\\program\\client\\src\\App.tsx":"2","E:\\GDesign\\program\\client\\src\\index.tsx":"3","E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx":"4","E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx":"5","E:\\GDesign\\program\\client\\src\\reportWebVitals.ts":"6","E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx":"7","E:\\GDesign\\program\\client\\src\\components\\Info.tsx":"8","E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx":"9","E:\\GDesign\\program\\client\\src\\components\\Table.tsx":"10","E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx":"11","E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx":"12","E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx":"13","E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx":"14","E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js":"15","E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx":"16"},{"size":14609,"mtime":1615596622974,"results":"17","hashOfConfig":"18"},{"size":20562,"mtime":1615645973874,"results":"19","hashOfConfig":"18"},{"size":457,"mtime":1611729263800,"results":"20","hashOfConfig":"18"},{"size":2049,"mtime":1615595555012,"results":"21","hashOfConfig":"18"},{"size":7195,"mtime":1615446813266,"results":"22","hashOfConfig":"18"},{"size":425,"mtime":1609982263790,"results":"23","hashOfConfig":"18"},{"size":2794,"mtime":1613826547908,"results":"24","hashOfConfig":"18"},{"size":3306,"mtime":1615531623829,"results":"25","hashOfConfig":"18"},{"size":7646,"mtime":1614863655438,"results":"26","hashOfConfig":"18"},{"size":4058,"mtime":1611406252995,"results":"27","hashOfConfig":"18"},{"size":14538,"mtime":1614858526802,"results":"28","hashOfConfig":"18"},{"size":8181,"mtime":1614868470082,"results":"29","hashOfConfig":"18"},{"size":3184,"mtime":1614588853461,"results":"30","hashOfConfig":"18"},{"size":6058,"mtime":1615646024827,"results":"31","hashOfConfig":"18"},{"size":5702,"mtime":1615529771241,"results":"32","hashOfConfig":"18"},{"size":15485,"mtime":1615648806751,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"pde34m",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\GDesign\\program\\client\\src\\components\\ScatterPlot.tsx",[],["70","71"],"E:\\GDesign\\program\\client\\src\\App.tsx",["72"],"E:\\GDesign\\program\\client\\src\\index.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\ForceCompute.tsx",["73"],"E:\\GDesign\\program\\client\\src\\components\\NodeLink.tsx",[],"E:\\GDesign\\program\\client\\src\\reportWebVitals.ts",[],["74","75"],"E:\\GDesign\\program\\client\\src\\components\\NodeList.tsx",["76"],"E:\\GDesign\\program\\client\\src\\components\\Info.tsx",["77"],"E:\\GDesign\\program\\client\\src\\components\\Parallel.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\Table.tsx",["78"],"E:\\GDesign\\program\\client\\src\\components\\DrawPanel.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\DistributeAttr.tsx",["79"],"import * as React from 'react';\r\nimport axios from 'axios';\r\nimport * as d3 from 'd3';\r\n\r\ntype attr = {\r\n    [propName: string]: any,\r\n}\r\n\r\ninterface Props {\r\n    url: string,\r\n    parent: any,\r\n    dimensions: number,\r\n    attrWeight: number,\r\n    strWeight: number,\r\n    attrChecked: attr,\r\n    choosePoints: Array<ChoosePointData>,//匹配的数据\r\n    centerPoint: ChoosePointData,\r\n    display: string,\r\n    dataType: string,\r\n    graphType: string,//结构还是属性\r\n    x: string,//x轴字段\r\n    y: string,//y轴字段\r\n}\r\n//定义边数组\r\ntype edges = Array<number>;\r\n//定义散点数据接口\r\ntype ChoosePointData = {\r\n    id: number,\r\n    // nodes: Array<number>,\r\n    // edges:Array<edges>,\r\n    [propName: string]: any,\r\n}\r\nclass DistributeAttr extends React.Component<Props, any>{\r\n\r\n    private svgRef: React.RefObject<SVGSVGElement>;\r\n    public padding = { top: 20, bottom: 30, left: 30, right: 20 };\r\n    public svgWidth: number = 0;\r\n    public svgHeight: number = 0;\r\n    public lightColor: string = 'orange';\r\n    public centerColor: string = 'red';\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = { data: [], choosePoints: [], centerPoint: null };\r\n        this.svgRef = React.createRef();\r\n        this.compute = this.compute.bind(this);\r\n        this.searchGraph = this.searchGraph.bind(this);\r\n    }\r\n\r\n    compute(data: any, xAttr: string, yAttr: string): void {\r\n        const { graphType } = this.props;\r\n        let x_min_max = d3.extent(data, (d: any) => d[graphType][xAttr]);\r\n        // x_min_max[0]=0;\r\n        let y_min_max = d3.extent(data, (d: any) => d[graphType][yAttr]);\r\n        // y_min_max[0]=0;\r\n        let xscale = d3.scaleLinear(x_min_max, [this.padding.left, this.svgWidth - this.padding.right]);\r\n        let yscale = d3.scaleLinear(y_min_max, [this.svgHeight - this.padding.bottom, this.padding.top]);\r\n\r\n        data.forEach((value: any) => {\r\n            value.x = xscale(value[graphType][xAttr]);\r\n            value.y = yscale(value[graphType][yAttr]);\r\n        });\r\n\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .selectAll(\"g\")\r\n            .remove();\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".text\")\r\n            .selectAll(\"g\")\r\n            .remove();\r\n\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(-2,${this.svgHeight - this.padding.bottom + 2})`)\r\n            .call(d3.axisBottom(xscale).ticks(8))\r\n        d3.select(\"#svg_\" + graphType)\r\n            .select(\".axis\")\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(${this.padding.left - 2},2)`)\r\n            .call(d3.axisLeft(yscale).ticks(5))\r\n\r\n        this.setState({ data: data });\r\n\r\n    }\r\n    \r\n    searchGraph(pointData: ChoosePointData): void {//根据名字搜索包含该节点的网络\r\n        const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = this.props;\r\n        let checkedArr: any = [];\r\n        for (let key in attrChecked) {\r\n            checkedArr.push({ name: key, value: attrChecked[key] })\r\n        }\r\n        axios.post(url + '/searchGraphByGraphId', { wd: pointData.id, dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n            .then(res => {\r\n                // console.log(res.data.data);\r\n                this.props.parent.setPersonGraphs(res.data.data);\r\n            })\r\n        this.setState({ centerPoint: pointData });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.svgWidth = this.svgRef.current?.clientWidth || 0;\r\n        this.svgHeight = this.svgRef.current?.clientHeight || 0;\r\n\r\n    }\r\n    componentWillReceiveProps(nextProps: Props): void {\r\n        if (nextProps.choosePoints !== this.props.choosePoints) {\r\n            let choosePoints = [];\r\n            for (let j in nextProps.choosePoints) {\r\n                for (let i in this.state.data) {\r\n                    if (this.state.data[i].id === nextProps.choosePoints[j].id) {\r\n                        choosePoints.push(this.state.data[i]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            this.setState({ choosePoints: choosePoints });\r\n        }\r\n        if (nextProps.centerPoint !== this.props.centerPoint) {\r\n            for (let i in this.state.data) {\r\n                if (this.state.data[i].id === nextProps.centerPoint.id) {\r\n                    this.setState({ centerPoint: this.state.data[i] });\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (nextProps.attrChecked !== this.props.attrChecked && nextProps.x!=='') {\r\n            const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = nextProps;\r\n            let checkedArr: any = [];\r\n            for (let key in attrChecked) {\r\n                checkedArr.push({ name: key, value: attrChecked[key] })\r\n            }\r\n            axios.post(url, { dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n                .then(res => {\r\n                    const data = res.data.data;\r\n                    let { x, y } = nextProps;\r\n                    this.compute(data, x, y);\r\n                })\r\n        }\r\n        if (nextProps.x !== this.props.x || nextProps.y !== this.props.y) {\r\n            const { data } = this.state;\r\n            const { x, y } = nextProps;\r\n            if (data.length > 0) {\r\n                this.compute(data, x, y);\r\n            }\r\n            else{\r\n                const { url, dimensions, attrWeight, strWeight, attrChecked, dataType } = nextProps;\r\n                let checkedArr: any = [];\r\n                for (let key in attrChecked) {\r\n                    checkedArr.push({ name: key, value: attrChecked[key] })\r\n                }\r\n                axios.post(url, { dataType: dataType, dimensions: dimensions, attrWeight: attrWeight, strWeight: strWeight, attrChecked: checkedArr })\r\n                    .then(res => {\r\n                        const data = res.data.data;\r\n                        let { x, y } = nextProps;\r\n                        this.compute(data, x, y);\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render(): React.ReactElement {\r\n        const { data, centerPoint, choosePoints } = this.state;\r\n        const {x,y,display,graphType} = this.props;\r\n        let allPointEl = data.map((value: any, index: number) =>\r\n            <circle key={index} cx={value.x} cy={value.y} r='2px' fill='#1890ff' fillOpacity={0.4} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, value)}></circle>\r\n        )\r\n        \r\n        //centerPoint\r\n        //点击的点，需要匹配的点\r\n        let centerPointEl = null;\r\n        if (centerPoint != null) {\r\n            centerPointEl = <circle r=\"2px\" cx={centerPoint.x} cy={centerPoint.y} fill={this.centerColor} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, centerPoint)}></circle>\r\n        }\r\n        //圈选的点，匹配到的点\r\n        let pointsChooseEl = choosePoints.map((value: ChoosePointData, index: number) =>\r\n            <circle r=\"2px\" cx={value.x} cy={value.y} key={index} fill={this.lightColor} stroke='white' strokeWidth='0.5px'\r\n                onClick={this.searchGraph.bind(this, value)}></circle>\r\n        )\r\n\r\n        return (\r\n            <div className=\"distributeAttr\" style={{ position: 'absolute', left: display === '0' ? '-100%' : '0' }}>\r\n                \r\n                <svg style={{ width: '100%', height: '100%' }} ref={this.svgRef} id={'svg_' + graphType}>\r\n                    <g className=\"axis\"></g>\r\n                    <g className=\"text\"></g>\r\n                    <text x={this.svgWidth-50} y={this.svgHeight-40}>{x}</text>\r\n                    <text x='5px' y='15px'>{y}</text>\r\n                    {allPointEl}\r\n                    {pointsChooseEl}\r\n                    {centerPointEl}\r\n\r\n                </svg>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default DistributeAttr;",["80","81"],"E:\\GDesign\\program\\client\\src\\components\\TargetTree.tsx",[],"E:\\GDesign\\program\\client\\src\\components\\PNodeLink.tsx",["82","83"],"E:\\GDesign\\program\\client\\src\\components\\ellipseForce.js",["84","85","86","87","88","89"],"E:\\GDesign\\program\\client\\src\\components\\PTargetTree.tsx",["90","91","92","93"],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":20,"column":6,"nodeType":"100","messageId":"101","endLine":20,"endColumn":11},{"ruleId":"98","severity":1,"message":"99","line":6,"column":6,"nodeType":"100","messageId":"101","endLine":6,"endColumn":11},{"ruleId":"94","replacedBy":"102"},{"ruleId":"96","replacedBy":"103"},{"ruleId":"98","severity":1,"message":"104","line":48,"column":15,"nodeType":"100","messageId":"101","endLine":48,"endColumn":21},{"ruleId":"98","severity":1,"message":"99","line":8,"column":6,"nodeType":"100","messageId":"101","endLine":8,"endColumn":11},{"ruleId":"105","severity":1,"message":"106","line":40,"column":63,"nodeType":"107","messageId":"108","endLine":40,"endColumn":65},{"ruleId":"98","severity":1,"message":"99","line":25,"column":6,"nodeType":"100","messageId":"101","endLine":25,"endColumn":11},{"ruleId":"94","replacedBy":"109"},{"ruleId":"96","replacedBy":"110"},{"ruleId":"98","severity":1,"message":"111","line":97,"column":40,"nodeType":"100","messageId":"101","endLine":97,"endColumn":49},{"ruleId":"112","severity":1,"message":"113","line":106,"column":59,"nodeType":"114","messageId":"115","endLine":106,"endColumn":61},{"ruleId":"116","severity":1,"message":"117","line":7,"column":1,"nodeType":"118","endLine":155,"endColumn":2},{"ruleId":"105","severity":1,"message":"119","line":44,"column":17,"nodeType":"107","messageId":"108","endLine":44,"endColumn":19},{"ruleId":"105","severity":1,"message":"119","line":55,"column":22,"nodeType":"107","messageId":"108","endLine":55,"endColumn":24},{"ruleId":"105","severity":1,"message":"119","line":55,"column":37,"nodeType":"107","messageId":"108","endLine":55,"endColumn":39},{"ruleId":"105","severity":1,"message":"119","line":59,"column":29,"nodeType":"107","messageId":"108","endLine":59,"endColumn":31},{"ruleId":"105","severity":1,"message":"119","line":63,"column":29,"nodeType":"107","messageId":"108","endLine":63,"endColumn":31},{"ruleId":"105","severity":1,"message":"106","line":117,"column":81,"nodeType":"107","messageId":"108","endLine":117,"endColumn":83},{"ruleId":"105","severity":1,"message":"106","line":120,"column":50,"nodeType":"107","messageId":"108","endLine":120,"endColumn":52},{"ruleId":"105","severity":1,"message":"106","line":177,"column":85,"nodeType":"107","messageId":"108","endLine":177,"endColumn":87},{"ruleId":"105","severity":1,"message":"106","line":180,"column":54,"nodeType":"107","messageId":"108","endLine":180,"endColumn":56},"no-native-reassign",["120"],"no-negated-in-lhs",["121"],"@typescript-eslint/no-unused-vars","'edges' is defined but never used.","Identifier","unusedVar",["120"],["121"],"'suffix' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["120"],["121"],"'focusNode' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]